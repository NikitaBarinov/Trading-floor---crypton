/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type ProposalStruct = {
  recipient: string;
  transactionByteCode: BytesLike;
  description: string;
  endTime: BigNumberish;
  totalVotes: BigNumberish;
  totalVotesFor: BigNumberish;
  open: boolean;
};

export type ProposalStructOutput = [
  string,
  string,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  boolean
] & {
  recipient: string;
  transactionByteCode: string;
  description: string;
  endTime: BigNumber;
  totalVotes: BigNumber;
  totalVotesFor: BigNumber;
  open: boolean;
};

export interface DAOInterface extends utils.Interface {
  functions: {
    "addProposal(address,string,bytes)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "chairPerson()": FunctionFragment;
    "changeVotingRules(uint256,uint256)": FunctionFragment;
    "checkVoting(uint256,address)": FunctionFragment;
    "debatingPeriod()": FunctionFragment;
    "delegate(uint256,address)": FunctionFragment;
    "delegates(address,uint256,uint256)": FunctionFragment;
    "deposit(uint256)": FunctionFragment;
    "finishVote(uint256)": FunctionFragment;
    "getBlockTimeStamp()": FunctionFragment;
    "getDelegate(address,uint256)": FunctionFragment;
    "getProposal(uint256)": FunctionFragment;
    "getUnlockBalance(address)": FunctionFragment;
    "getVote(address,uint256)": FunctionFragment;
    "minimumQuorum()": FunctionFragment;
    "proposals(uint256)": FunctionFragment;
    "unlockBalance(address)": FunctionFragment;
    "vote(uint256,bool)": FunctionFragment;
    "voteToken()": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addProposal",
    values: [string, string, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "chairPerson",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "changeVotingRules",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkVoting",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "debatingPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "delegate",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "delegates",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "finishVote",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBlockTimeStamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDelegate",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUnlockBalance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getVote",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "minimumQuorum",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockBalance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(functionFragment: "voteToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "chairPerson",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeVotingRules",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkVoting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "debatingPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "delegate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "delegates", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "finishVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBlockTimeStamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDelegate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnlockBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minimumQuorum",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "proposals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unlockBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "voteToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Delegate(address,address,uint256)": EventFragment;
    "Deposit(address,uint256)": EventFragment;
    "ProposalClosed(uint256)": EventFragment;
    "ProposalCreated(address,bytes,string,uint256)": EventFragment;
    "ProposalFinished(uint256,bytes,string,bool)": EventFragment;
    "VoteCreated(address,uint256,uint256,bool)": EventFragment;
    "VotingRulesChanged(uint256,uint256)": EventFragment;
    "Withdraw(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Delegate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalClosed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalFinished"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VoteCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VotingRulesChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export type DelegateEvent = TypedEvent<
  [string, string, BigNumber],
  { _from: string; _to: string; _proposalId: BigNumber }
>;

export type DelegateEventFilter = TypedEventFilter<DelegateEvent>;

export type DepositEvent = TypedEvent<
  [string, BigNumber],
  { sender: string; _amount: BigNumber }
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export type ProposalClosedEvent = TypedEvent<
  [BigNumber],
  { proposalId: BigNumber }
>;

export type ProposalClosedEventFilter = TypedEventFilter<ProposalClosedEvent>;

export type ProposalCreatedEvent = TypedEvent<
  [string, string, string, BigNumber],
  {
    proposer: string;
    sygnHash: string;
    description: string;
    votingTimer: BigNumber;
  }
>;

export type ProposalCreatedEventFilter = TypedEventFilter<ProposalCreatedEvent>;

export type ProposalFinishedEvent = TypedEvent<
  [BigNumber, string, string, boolean],
  {
    _proposalId: BigNumber;
    _transactionByteCode: string;
    _description: string;
    _success: boolean;
  }
>;

export type ProposalFinishedEventFilter =
  TypedEventFilter<ProposalFinishedEvent>;

export type VoteCreatedEvent = TypedEvent<
  [string, BigNumber, BigNumber, boolean],
  {
    _voter: string;
    proposalId: BigNumber;
    _amount: BigNumber;
    _forAgainst: boolean;
  }
>;

export type VoteCreatedEventFilter = TypedEventFilter<VoteCreatedEvent>;

export type VotingRulesChangedEvent = TypedEvent<
  [BigNumber, BigNumber],
  { _minimumQuorum: BigNumber; _debatingPeriod: BigNumber }
>;

export type VotingRulesChangedEventFilter =
  TypedEventFilter<VotingRulesChangedEvent>;

export type WithdrawEvent = TypedEvent<
  [string, BigNumber],
  { sender: string; _amount: BigNumber }
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface DAO extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DAOInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addProposal(
      _recipient: string,
      _description: string,
      _transactionByteCode: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { balance: BigNumber }>;

    chairPerson(overrides?: CallOverrides): Promise<[string]>;

    changeVotingRules(
      _minimumQuorum: BigNumberish,
      _debatingPeriodDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    checkVoting(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[number]>;

    debatingPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    delegate(
      _proposalId: BigNumberish,
      _delegat: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    delegates(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    deposit(
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    finishVote(
      _proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getBlockTimeStamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    getDelegate(
      _voter: string,
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getProposal(
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[ProposalStructOutput]>;

    getUnlockBalance(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getVote(
      _voter: string,
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    minimumQuorum(overrides?: CallOverrides): Promise<[BigNumber]>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, BigNumber, BigNumber, boolean] & {
        recipient: string;
        transactionByteCode: string;
        description: string;
        endTime: BigNumber;
        totalVotes: BigNumber;
        totalVotesFor: BigNumber;
        open: boolean;
      }
    >;

    unlockBalance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    vote(
      _proposalId: BigNumberish,
      supportAgainst: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    voteToken(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addProposal(
    _recipient: string,
    _description: string,
    _transactionByteCode: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  chairPerson(overrides?: CallOverrides): Promise<string>;

  changeVotingRules(
    _minimumQuorum: BigNumberish,
    _debatingPeriodDuration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  checkVoting(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<number>;

  debatingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  delegate(
    _proposalId: BigNumberish,
    _delegat: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  delegates(
    arg0: string,
    arg1: BigNumberish,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  deposit(
    _amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  finishVote(
    _proposalId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getBlockTimeStamp(overrides?: CallOverrides): Promise<BigNumber>;

  getDelegate(
    _voter: string,
    _proposalId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getProposal(
    _proposalId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<ProposalStructOutput>;

  getUnlockBalance(
    _owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getVote(
    _voter: string,
    _proposalId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  minimumQuorum(overrides?: CallOverrides): Promise<BigNumber>;

  proposals(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, BigNumber, BigNumber, BigNumber, boolean] & {
      recipient: string;
      transactionByteCode: string;
      description: string;
      endTime: BigNumber;
      totalVotes: BigNumber;
      totalVotesFor: BigNumber;
      open: boolean;
    }
  >;

  unlockBalance(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  vote(
    _proposalId: BigNumberish,
    supportAgainst: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  voteToken(overrides?: CallOverrides): Promise<string>;

  withdraw(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addProposal(
      _recipient: string,
      _description: string,
      _transactionByteCode: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    chairPerson(overrides?: CallOverrides): Promise<string>;

    changeVotingRules(
      _minimumQuorum: BigNumberish,
      _debatingPeriodDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    checkVoting(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<number>;

    debatingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    delegate(
      _proposalId: BigNumberish,
      _delegat: string,
      overrides?: CallOverrides
    ): Promise<void>;

    delegates(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    deposit(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    finishVote(
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getBlockTimeStamp(overrides?: CallOverrides): Promise<BigNumber>;

    getDelegate(
      _voter: string,
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getProposal(
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<ProposalStructOutput>;

    getUnlockBalance(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVote(
      _voter: string,
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minimumQuorum(overrides?: CallOverrides): Promise<BigNumber>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, BigNumber, BigNumber, boolean] & {
        recipient: string;
        transactionByteCode: string;
        description: string;
        endTime: BigNumber;
        totalVotes: BigNumber;
        totalVotesFor: BigNumber;
        open: boolean;
      }
    >;

    unlockBalance(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    vote(
      _proposalId: BigNumberish,
      supportAgainst: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    voteToken(overrides?: CallOverrides): Promise<string>;

    withdraw(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Delegate(address,address,uint256)"(
      _from?: null,
      _to?: null,
      _proposalId?: null
    ): DelegateEventFilter;
    Delegate(_from?: null, _to?: null, _proposalId?: null): DelegateEventFilter;

    "Deposit(address,uint256)"(
      sender?: null,
      _amount?: null
    ): DepositEventFilter;
    Deposit(sender?: null, _amount?: null): DepositEventFilter;

    "ProposalClosed(uint256)"(proposalId?: null): ProposalClosedEventFilter;
    ProposalClosed(proposalId?: null): ProposalClosedEventFilter;

    "ProposalCreated(address,bytes,string,uint256)"(
      proposer?: null,
      sygnHash?: null,
      description?: null,
      votingTimer?: null
    ): ProposalCreatedEventFilter;
    ProposalCreated(
      proposer?: null,
      sygnHash?: null,
      description?: null,
      votingTimer?: null
    ): ProposalCreatedEventFilter;

    "ProposalFinished(uint256,bytes,string,bool)"(
      _proposalId?: null,
      _transactionByteCode?: null,
      _description?: null,
      _success?: null
    ): ProposalFinishedEventFilter;
    ProposalFinished(
      _proposalId?: null,
      _transactionByteCode?: null,
      _description?: null,
      _success?: null
    ): ProposalFinishedEventFilter;

    "VoteCreated(address,uint256,uint256,bool)"(
      _voter?: null,
      proposalId?: null,
      _amount?: null,
      _forAgainst?: null
    ): VoteCreatedEventFilter;
    VoteCreated(
      _voter?: null,
      proposalId?: null,
      _amount?: null,
      _forAgainst?: null
    ): VoteCreatedEventFilter;

    "VotingRulesChanged(uint256,uint256)"(
      _minimumQuorum?: null,
      _debatingPeriod?: null
    ): VotingRulesChangedEventFilter;
    VotingRulesChanged(
      _minimumQuorum?: null,
      _debatingPeriod?: null
    ): VotingRulesChangedEventFilter;

    "Withdraw(address,uint256)"(
      sender?: null,
      _amount?: null
    ): WithdrawEventFilter;
    Withdraw(sender?: null, _amount?: null): WithdrawEventFilter;
  };

  estimateGas: {
    addProposal(
      _recipient: string,
      _description: string,
      _transactionByteCode: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    chairPerson(overrides?: CallOverrides): Promise<BigNumber>;

    changeVotingRules(
      _minimumQuorum: BigNumberish,
      _debatingPeriodDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    checkVoting(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    debatingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    delegate(
      _proposalId: BigNumberish,
      _delegat: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    delegates(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deposit(
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    finishVote(
      _proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getBlockTimeStamp(overrides?: CallOverrides): Promise<BigNumber>;

    getDelegate(
      _voter: string,
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProposal(
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUnlockBalance(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVote(
      _voter: string,
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minimumQuorum(overrides?: CallOverrides): Promise<BigNumber>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unlockBalance(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    vote(
      _proposalId: BigNumberish,
      supportAgainst: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    voteToken(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addProposal(
      _recipient: string,
      _description: string,
      _transactionByteCode: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    chairPerson(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    changeVotingRules(
      _minimumQuorum: BigNumberish,
      _debatingPeriodDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    checkVoting(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    debatingPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    delegate(
      _proposalId: BigNumberish,
      _delegat: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    delegates(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deposit(
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    finishVote(
      _proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getBlockTimeStamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDelegate(
      _voter: string,
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProposal(
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUnlockBalance(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVote(
      _voter: string,
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minimumQuorum(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unlockBalance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vote(
      _proposalId: BigNumberish,
      supportAgainst: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    voteToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
