/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type ReferStruct = { firstRefer: string; secondRefer: string };

export type ReferStructOutput = [string, string] & {
  firstRefer: string;
  secondRefer: string;
};

export type RoundStruct = {
  totalSupply: BigNumberish;
  finishTime: BigNumberish;
  tradingVolumeETH: BigNumberish;
  saleOrTrade: boolean;
};

export type RoundStructOutput = [BigNumber, BigNumber, BigNumber, boolean] & {
  totalSupply: BigNumber;
  finishTime: BigNumber;
  tradingVolumeETH: BigNumber;
  saleOrTrade: boolean;
};

export interface TradingFloorInterface extends utils.Interface {
  functions: {
    "balanceOfACDM(address)": FunctionFragment;
    "balanceOfETH(address)": FunctionFragment;
    "buyACDMInSale(uint256)": FunctionFragment;
    "finishRound()": FunctionFragment;
    "getBlockTimeStamp()": FunctionFragment;
    "getPrice()": FunctionFragment;
    "getRefer(address)": FunctionFragment;
    "getRound(uint256)": FunctionFragment;
    "getTradingFloorAddress()": FunctionFragment;
    "numOfRound()": FunctionFragment;
    "registration(address,address)": FunctionFragment;
    "totalSupplyACDM()": FunctionFragment;
    "tradingFloorInit()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "balanceOfACDM",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfETH",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "buyACDMInSale",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "finishRound",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBlockTimeStamp",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getPrice", values?: undefined): string;
  encodeFunctionData(functionFragment: "getRefer", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getRound",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTradingFloorAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "numOfRound",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registration",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupplyACDM",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tradingFloorInit",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "balanceOfACDM",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyACDMInSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finishRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBlockTimeStamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getRefer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getRound", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTradingFloorAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "numOfRound", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupplyACDM",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tradingFloorInit",
    data: BytesLike
  ): Result;

  events: {
    "ACDMBought(address,uint256,uint256,uint256)": EventFragment;
    "FeeTransfered(address,uint256)": EventFragment;
    "PriceChanged(uint256)": EventFragment;
    "RoundStarted(bool,uint256,uint256)": EventFragment;
    "UserIsRegistrated(address,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ACDMBought"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeTransfered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PriceChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoundStarted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserIsRegistrated"): EventFragment;
}

export type ACDMBoughtEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  {
    buyer: string;
    _amountACDM: BigNumber;
    _PriceInETH: BigNumber;
    ACDMLeft: BigNumber;
  }
>;

export type ACDMBoughtEventFilter = TypedEventFilter<ACDMBoughtEvent>;

export type FeeTransferedEvent = TypedEvent<
  [string, BigNumber],
  { _to: string; _amount: BigNumber }
>;

export type FeeTransferedEventFilter = TypedEventFilter<FeeTransferedEvent>;

export type PriceChangedEvent = TypedEvent<
  [BigNumber],
  { _newPrice: BigNumber }
>;

export type PriceChangedEventFilter = TypedEventFilter<PriceChangedEvent>;

export type RoundStartedEvent = TypedEvent<
  [boolean, BigNumber, BigNumber],
  { _saleOrTrade: boolean; _totalSupply: BigNumber; _price: BigNumber }
>;

export type RoundStartedEventFilter = TypedEventFilter<RoundStartedEvent>;

export type UserIsRegistratedEvent = TypedEvent<
  [string, string, string],
  { _user: string; _firstRefer: string; _secondRefer: string }
>;

export type UserIsRegistratedEventFilter =
  TypedEventFilter<UserIsRegistratedEvent>;

export interface TradingFloor extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TradingFloorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    balanceOfACDM(
      _userAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { balance: BigNumber }>;

    balanceOfETH(
      _userAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { balance: BigNumber }>;

    buyACDMInSale(
      _amountACDM: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    finishRound(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getBlockTimeStamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRefer(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[ReferStructOutput]>;

    getRound(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[RoundStructOutput]>;

    getTradingFloorAddress(overrides?: CallOverrides): Promise<[string]>;

    numOfRound(overrides?: CallOverrides): Promise<[BigNumber]>;

    registration(
      _firstRefer: string,
      _secondRefer: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalSupplyACDM(overrides?: CallOverrides): Promise<[BigNumber]>;

    tradingFloorInit(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  balanceOfACDM(
    _userAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOfETH(
    _userAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  buyACDMInSale(
    _amountACDM: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  finishRound(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getBlockTimeStamp(overrides?: CallOverrides): Promise<BigNumber>;

  getPrice(overrides?: CallOverrides): Promise<BigNumber>;

  getRefer(
    _user: string,
    overrides?: CallOverrides
  ): Promise<ReferStructOutput>;

  getRound(
    _id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<RoundStructOutput>;

  getTradingFloorAddress(overrides?: CallOverrides): Promise<string>;

  numOfRound(overrides?: CallOverrides): Promise<BigNumber>;

  registration(
    _firstRefer: string,
    _secondRefer: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalSupplyACDM(overrides?: CallOverrides): Promise<BigNumber>;

  tradingFloorInit(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    balanceOfACDM(
      _userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfETH(
      _userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buyACDMInSale(
      _amountACDM: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    finishRound(overrides?: CallOverrides): Promise<void>;

    getBlockTimeStamp(overrides?: CallOverrides): Promise<BigNumber>;

    getPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getRefer(
      _user: string,
      overrides?: CallOverrides
    ): Promise<ReferStructOutput>;

    getRound(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<RoundStructOutput>;

    getTradingFloorAddress(overrides?: CallOverrides): Promise<string>;

    numOfRound(overrides?: CallOverrides): Promise<BigNumber>;

    registration(
      _firstRefer: string,
      _secondRefer: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    totalSupplyACDM(overrides?: CallOverrides): Promise<BigNumber>;

    tradingFloorInit(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "ACDMBought(address,uint256,uint256,uint256)"(
      buyer?: null,
      _amountACDM?: null,
      _PriceInETH?: null,
      ACDMLeft?: null
    ): ACDMBoughtEventFilter;
    ACDMBought(
      buyer?: null,
      _amountACDM?: null,
      _PriceInETH?: null,
      ACDMLeft?: null
    ): ACDMBoughtEventFilter;

    "FeeTransfered(address,uint256)"(
      _to?: null,
      _amount?: null
    ): FeeTransferedEventFilter;
    FeeTransfered(_to?: null, _amount?: null): FeeTransferedEventFilter;

    "PriceChanged(uint256)"(_newPrice?: null): PriceChangedEventFilter;
    PriceChanged(_newPrice?: null): PriceChangedEventFilter;

    "RoundStarted(bool,uint256,uint256)"(
      _saleOrTrade?: null,
      _totalSupply?: null,
      _price?: null
    ): RoundStartedEventFilter;
    RoundStarted(
      _saleOrTrade?: null,
      _totalSupply?: null,
      _price?: null
    ): RoundStartedEventFilter;

    "UserIsRegistrated(address,address,address)"(
      _user?: null,
      _firstRefer?: null,
      _secondRefer?: null
    ): UserIsRegistratedEventFilter;
    UserIsRegistrated(
      _user?: null,
      _firstRefer?: null,
      _secondRefer?: null
    ): UserIsRegistratedEventFilter;
  };

  estimateGas: {
    balanceOfACDM(
      _userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfETH(
      _userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buyACDMInSale(
      _amountACDM: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    finishRound(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getBlockTimeStamp(overrides?: CallOverrides): Promise<BigNumber>;

    getPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getRefer(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    getRound(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getTradingFloorAddress(overrides?: CallOverrides): Promise<BigNumber>;

    numOfRound(overrides?: CallOverrides): Promise<BigNumber>;

    registration(
      _firstRefer: string,
      _secondRefer: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalSupplyACDM(overrides?: CallOverrides): Promise<BigNumber>;

    tradingFloorInit(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    balanceOfACDM(
      _userAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfETH(
      _userAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buyACDMInSale(
      _amountACDM: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    finishRound(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getBlockTimeStamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRefer(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRound(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTradingFloorAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    numOfRound(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registration(
      _firstRefer: string,
      _secondRefer: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalSupplyACDM(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tradingFloorInit(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
