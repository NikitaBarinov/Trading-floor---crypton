/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { TradingFloor, TradingFloorInterface } from "../TradingFloor";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_voteToken",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "buyer",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "_amountACDM",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "_PriceInETH",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "ACDMLeft",
        type: "uint256",
      },
    ],
    name: "ACDMBought",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "FeeTransfered",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "_newPrice",
        type: "uint256",
      },
    ],
    name: "PriceChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bool",
        name: "_saleOrTrade",
        type: "bool",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "_totalSupply",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "_price",
        type: "uint256",
      },
    ],
    name: "RoundStarted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "_user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "_firstRefer",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "_secondRefer",
        type: "address",
      },
    ],
    name: "UserIsRegistrated",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_userAddress",
        type: "address",
      },
    ],
    name: "balanceOfACDM",
    outputs: [
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_userAddress",
        type: "address",
      },
    ],
    name: "balanceOfETH",
    outputs: [
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amountACDM",
        type: "uint256",
      },
    ],
    name: "buyACDMInSale",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "finishRound",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getBlockTimeStamp",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getPrice",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_user",
        type: "address",
      },
    ],
    name: "getRefer",
    outputs: [
      {
        components: [
          {
            internalType: "address payable",
            name: "firstRefer",
            type: "address",
          },
          {
            internalType: "address payable",
            name: "secondRefer",
            type: "address",
          },
        ],
        internalType: "struct TradingFloor.refer",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_id",
        type: "uint256",
      },
    ],
    name: "getRound",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "totalSupply",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "finishTime",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "tradingVolumeETH",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "saleOrTrade",
            type: "bool",
          },
        ],
        internalType: "struct TradingFloor.round",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getTradingFloorAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "numOfRound",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "_firstRefer",
        type: "address",
      },
      {
        internalType: "address payable",
        name: "_secondRefer",
        type: "address",
      },
    ],
    name: "registration",
    outputs: [
      {
        internalType: "bool",
        name: "_success",
        type: "bool",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupplyACDM",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "tradingFloorInit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516113b43803806113b483398101604081905261002f91610061565b600080546001600160a01b0319166001600160a01b03929092169190911781556509184e72a00060025560015561008f565b600060208284031215610072578081fd5b81516001600160a01b0381168114610088578182fd5b9392505050565b6113168061009e6000396000f3fe6080604052600436106100c25760003560e01c806372bbe2d31161007f5780639270c82c116100595780639270c82c146102a157806398d5fdca146102c1578063ca49a543146102d6578063fb44b249146102e957600080fd5b806372bbe2d31461022157806373890fd1146102375780638f1327c01461024c57600080fd5b8063334551ff146100c757806346ca084a146101105780634a5338f114610133578063547916ea146101be578063561cd462146101d557806362a7d3a31461020b575b600080fd5b3480156100d357600080fd5b506100fd6100e236600461108b565b6001600160a01b031660009081526007602052604090205490565b6040519081526020015b60405180910390f35b61012361011e3660046110ae565b610304565b6040519015158152602001610107565b34801561013f57600080fd5b5061019761014e36600461108b565b604080518082018252600080825260209182018190526001600160a01b039384168152600882528290208251808401909352805484168352600101549092169181019190915290565b6040805182516001600160a01b039081168252602093840151169281019290925201610107565b3480156101ca57600080fd5b506101d3610535565b005b3480156101e157600080fd5b506100fd6101f036600461108b565b6001600160a01b031660009081526006602052604090205490565b34801561021757600080fd5b506100fd60035481565b34801561022d57600080fd5b506100fd60015481565b34801561024357600080fd5b506101d36107a1565b34801561025857600080fd5b5061026c610267366004611106565b610a06565b604051610107919081518152602080830151908201526040808301519082015260609182015115159181019190915260800190565b3480156102ad57600080fd5b506101d36102bc366004611106565b610a7d565b3480156102cd57600080fd5b506002546100fd565b3480156102e257600080fd5b50426100fd565b3480156102f557600080fd5b50604051308152602001610107565b336000818152600860205260408120549091906001600160a01b0316156103725760405162461bcd60e51b815260206004820152601a60248201527f5573657220697320616c7265616479207265676973746572656400000000000060448201526064015b60405180910390fd5b6001600160a01b038085166000908152600860205260409020548591161515806103a357506001600160a01b038116155b6103e55760405162461bcd60e51b8152602060048201526013602482015272155cd95c881b9bdd081c9959da5cdd195c9959606a1b6044820152606401610369565b6001600160a01b0380851660009081526008602052604090205485911615158061041657506001600160a01b038116155b6104585760405162461bcd60e51b8152602060048201526013602482015272155cd95c881b9bdd081c9959da5cdd195c9959606a1b6044820152606401610369565b336000908152600660209081526040808320349055600790915281205561047e86610df5565b33600090815260086020526040902080546001600160a01b0319166001600160a01b03929092169190911790556104b485610df5565b336000818152600860209081526040918290206001810180546001600160a01b0319166001600160a01b0396871690811790915590548351948552909416908301528101919091527fb58d9a518283fd68405fc94680daa780e552e7f9a19cca68813e0ce00ba88ccb9060600160405180910390a150600195945050505050565b306000908152600760205260409020541580610564575060018054600090815260056020526040902001544210155b6105b05760405162461bcd60e51b815260206004820152601760248201527f526f756e642063616e206e6f7420626520636c6f7365640000000000000000006044820152606401610369565b600080543082526007602052604091829020549151630852cd8d60e31b815260048101929092526001600160a01b0316906342966c6890602401600060405180830381600087803b15801561060457600080fd5b505af1158015610618573d6000803e3d6000fd5b50503060009081526007602052604081208054935091506106398380611283565b909155506106479050610e24565b60006002546298968061065a9190611264565b60015460009081526005602052604090206002015461067c9062989680611264565b6106869190611157565b6000546040516340c10f1960e01b8152306004820152602481018390529192506001600160a01b0316906340c10f1990604401600060405180830381600087803b1580156106d357600080fd5b505af11580156106e7573d6000803e3d6000fd5b505060005460405163095ea7b360e01b8152306004820152602481018590526001600160a01b03909116925063095ea7b39150604401602060405180830381600087803b15801561073757600080fd5b505af115801561074b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076f91906110e6565b5030600090815260076020526040812082905560018054916107908361129a565b919050555061079e81610e89565b50565b60008054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156107ed57600080fd5b505afa158015610801573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610825919061111e565b60ff1660048190556000546001600160a01b0316906340c10f1990309061084d90600a6111ba565b61085a90620186a0611264565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b1580156108a057600080fd5b505af11580156108b4573d6000803e3d6000fd5b50506000546004546001600160a01b03909116925063095ea7b3915030906108dd90600a6111ba565b6108ea90620186a0611264565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b15801561093057600080fd5b505af1158015610944573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061096891906110e6565b5060045461097790600a6111ba565b61098490620186a0611264565b306000908152600760205260408120919091556109a1904261113f565b60018054600090815260056020526040902001556004546109c390600a6111ba565b6109d090620186a0611264565b6001805460009081526005602052604080822093909355815481528281206002018190559054815220600301805460ff19169055565b610a3360405180608001604052806000815260200160008152602001600081526020016000151581525090565b5060009081526005602090815260409182902082516080810184528154815260018201549281019290925260028101549282019290925260039091015460ff161515606082015290565b60006298968060025462989680610a949190611264565b610a9e9084611264565b610aa89190611157565b60015460009081526005602052604090206003015490915060ff1615610b035760405162461bcd60e51b815260206004820152601060248201526f139bdd0818481cd85b19481c9bdd5b9960821b6044820152606401610369565b33600090815260066020526040902054811115610b565760405162461bcd60e51b8152602060048201526011602482015270496e737566666963656e742066756e647360781b6044820152606401610369565b30600090815260076020526040902054821115610baa5760405162461bcd60e51b8152602060048201526012602482015271496e737566666963656e7420746f6b656e7360701b6044820152606401610369565b3060009081526006602052604081208054839290610bc990849061113f565b90915550503360009081526006602052604081208054839290610bed908490611283565b909155505060015460009081526005602052604081206002018054839290610c1690849061113f565b9091555050600454610c2990600a6111ba565b610c339083611264565b3060009081526007602052604081208054909190610c52908490611283565b9091555050600454610c6590600a6111ba565b610c6f9083611264565b3360009081526007602052604081208054909190610c8e90849061113f565b909155505033600090815260086020526040902054610cb99082906001600160a01b03166005610fc5565b33600090815260086020526040902060010154610ce29082906001600160a01b03166003610fc5565b6000546004546001600160a01b03909116906323b872dd9030903390610d0990600a6111ba565b610d139087611264565b6040516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401602060405180830381600087803b158015610d6257600080fd5b505af1158015610d76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d9a91906110e6565b5030600090815260076020908152604091829020548251338152918201859052818301849052606082015290517fac8a5786dc6e1d04e5cd79ac17e8b30ba9499efe93b532a3c83f7b63b6e3ba6e9181900360800190a15050565b60006001600160a01b03821615610e0a575090565b6001600160a01b038216610e1f575030919050565b919050565b60646002546067610e359190611264565b610e3f9190611157565b610e4f906503a35294400061113f565b60028190556040519081527fa6dc15bdb68da224c66db4b3838d9a2b205138e8cff6774e57d0af91e196d6229060200160405180910390a1565b610e9460004261113f565b600180546000908152600560208190526040808320840194909455825482528382208590558254825292812060020181905581549091610ed391611283565b815260208101919091526040016000206003015460ff16151560011415610f15576001546000908152600560205260409020600301805460ff19169055610f63565b6005600060018054610f279190611283565b815260208101919091526040016000206003015460ff16610f6357600180546000908152600560205260409020600301805460ff191690911790555b60015460009081526005602090815260409182902060038101549054600254845160ff9093161515835292820152918201527f3f1f256d10c452e96cacc3da6ad90cd0b5d4aa08e745cb4ccb46bf38ef4b248d9060600160405180910390a150565b6000633b9aca00610fd68386611264565b610fe39062989680611264565b610fed9190611157565b30600090815260066020526040812080549293508392909190611011908490611283565b90915550506001600160a01b0383166000908152600660205260408120805483929061103e90849061113f565b9091555050604080516001600160a01b0385168152602081018390527f2604fdad714a10fb8b95e0f03397e449f85ee9df88bd145ca531f15b8350fb57910160405180910390a150505050565b60006020828403121561109c578081fd5b81356110a7816112cb565b9392505050565b600080604083850312156110c0578081fd5b82356110cb816112cb565b915060208301356110db816112cb565b809150509250929050565b6000602082840312156110f7578081fd5b815180151581146110a7578182fd5b600060208284031215611117578081fd5b5035919050565b60006020828403121561112f578081fd5b815160ff811681146110a7578182fd5b60008219821115611152576111526112b5565b500190565b60008261117257634e487b7160e01b81526012600452602481fd5b500490565b600181815b808511156111b2578160001904821115611198576111986112b5565b808516156111a557918102915b93841c939080029061117c565b509250929050565b60006110a783836000826111d05750600161125e565b816111dd5750600061125e565b81600181146111f357600281146111fd57611219565b600191505061125e565b60ff84111561120e5761120e6112b5565b50506001821b61125e565b5060208310610133831016604e8410600b841016171561123c575081810a61125e565b6112468383611177565b806000190482111561125a5761125a6112b5565b0290505b92915050565b600081600019048311821515161561127e5761127e6112b5565b500290565b600082821015611295576112956112b5565b500390565b60006000198214156112ae576112ae6112b5565b5060010190565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b038116811461079e57600080fdfea26469706673582212203c91717460b4cb2acb9edde345716e89b641794cdb4b1b37d40d9eac77d90f7664736f6c63430008040033";

type TradingFloorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TradingFloorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TradingFloor__factory extends ContractFactory {
  constructor(...args: TradingFloorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    _voteToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TradingFloor> {
    return super.deploy(_voteToken, overrides || {}) as Promise<TradingFloor>;
  }
  getDeployTransaction(
    _voteToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_voteToken, overrides || {});
  }
  attach(address: string): TradingFloor {
    return super.attach(address) as TradingFloor;
  }
  connect(signer: Signer): TradingFloor__factory {
    return super.connect(signer) as TradingFloor__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TradingFloorInterface {
    return new utils.Interface(_abi) as TradingFloorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TradingFloor {
    return new Contract(address, _abi, signerOrProvider) as TradingFloor;
  }
}
